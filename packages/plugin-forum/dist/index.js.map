{"version":3,"sources":["../src/actions/createForumPost.ts","../src/environment.ts","../src/examples.ts","../src/services.ts","../src/setupEnvironment.ts","../src/client.ts","../src/post.ts","../src/index.ts"],"sourcesContent":["import {\n    elizaLogger,\n    Action,\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n    ModelClass,\n    generateText,\n    composeContext\n} from \"@elizaos/core\";\nimport { validateForumConfig } from \"../environment\";\nimport { createForumPostExamples } from \"../examples\";\nimport { createForumService } from \"../services\";\nimport { saveTokensToFile } from \"../setupEnvironment\";\n\ninterface CreatePostOptions {\n    title: string;\n    description: string;\n    topic?: string;\n}\n\n// Forum post generation template for auto-generating content\nconst forumPostGenerationTemplate = `\n# You are {{agentName}}\n{{bio}}\n{{style}}\n\n# User message:\n{{userMessage}}\n\n# Task:\nGenerate a forum post based on the user's message. The post should have a title and description.\nOutput must be in JSON format with the following structure:\n{\n  \"title\": \"A catchy, relevant title (30-70 chars)\",\n  \"description\": \"A thoughtful, engaging post description (200-500 chars)\"\n}\n\nThe post should match my personality and writing style as {{agentName}}.\n`;\n\n// Helper function to sanitize text by removing underscores and hyphens\nfunction sanitizeText(text: string): string {\n    if (!text) return text;\n    // Replace underscores and hyphens with spaces\n    return text.replace(/[_\\-]/g, ' ').trim();\n}\n\nexport const createForumPostAction: Action = {\n    name: \"FORUM_CREATE_POST\",\n    similes: [\n        \"POST_ON_FORUM\",\n        \"CREATE_FORUM_POST\",\n        \"PUBLISH_TO_FORUM\"\n    ],\n    description: \"Creates a post on the forum with the specified title and description.\",\n    validate: async (runtime: IAgentRuntime) => {\n        try {\n            await validateForumConfig(runtime);\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Forum plugin validation failed:\", error);\n            return false;\n        }\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: CreatePostOptions | any,\n        callback: HandlerCallback\n    ) => {\n        try {\n            // First check the message content for action data (highest priority source)\n            let title = '';\n            let description = '';\n            let extractionSource = '';\n            \n            // 1. Direct extraction from message.content.options (from agent's content)\n            if (message?.content?.action === 'FORUM_CREATE_POST' && message?.content?.options) {\n                elizaLogger.info(`Found forum post data in message.content.options`);\n                title = message.content.options.title || '';\n                description = message.content.options.description || '';\n                extractionSource = 'message.content.options';\n                elizaLogger.info(`Extracted from message action - title: \"${title}\"`);\n                elizaLogger.info(`Extracted from message action - description length: ${description?.length || 0}`);\n            }\n\n            // 2. Then check the passed options object\n            if ((!title || !description) && options) {\n                if (!title && options.title) {\n                    title = options.title;\n                    extractionSource = 'options';\n                    elizaLogger.info(`Using title from options: \"${title}\"`);\n                }\n                if (!description && options.description) {\n                    description = options.description;\n                    extractionSource = 'options';\n                    elizaLogger.info(`Using description from options, length: ${description?.length || 0}`);\n                }\n            }\n            \n            // 3. Extract from the original message text (the chatbot's actual conversational response)\n            if (message?.content?.text) {\n                elizaLogger.info(`Attempting to extract data from agent message text`);\n                const text = message.content.text;\n                \n                // Try dash-separated format first: text—title: 'X', description: 'Y'\n                const dashTitleDescMatch = text.match(/.*?[—\\-–]\\s*title\\s*:\\s*['\"](.+?)['\"][\\s,]*description\\s*:\\s*['\"](.+?)['\"]/i);\n                if (dashTitleDescMatch && dashTitleDescMatch[1] && dashTitleDescMatch[2]) {\n                    title = dashTitleDescMatch[1].trim();\n                    description = dashTitleDescMatch[2].trim();\n                    extractionSource = 'message.content.text dash format';\n                    elizaLogger.info(`Extracted from dash format - title: \"${title}\"`);\n                    elizaLogger.info(`Extracted from dash format - description: \"${description.substring(0, 30)}...\"`);\n                } else {\n                    // Try standard format: title: 'X', description: 'Y'\n                    const standardMatch = text.match(/title\\s*:\\s*['\"](.+?)['\"][\\s,]*description\\s*:\\s*['\"](.+?)['\"]/i);\n                    if (standardMatch && standardMatch[1] && standardMatch[2]) {\n                        title = standardMatch[1].trim();\n                        description = standardMatch[2].trim();\n                        extractionSource = 'message.content.text standard format';\n                        elizaLogger.info(`Extracted from standard format - title: \"${title}\"`);\n                        elizaLogger.info(`Extracted from standard format - description: \"${description.substring(0, 30)}...\"`);\n                    } else {\n                        // Individual matches as fallback\n                        if (!title) {\n                            const titleMatch = text.match(/title[:\\s]+['\"](.+?)['\"]/i) ||\n                                              text.match(/title[:\\s]+([^,'\\\"\\n]+)/i);\n                            if (titleMatch && titleMatch[1]) {\n                                title = titleMatch[1].trim();\n                                extractionSource = 'message.content.text title match';\n                                elizaLogger.info(`Extracted title from message text: \"${title}\"`);\n                            }\n                        }\n                        \n                        if (!description) {\n                            const descMatch = text.match(/description[:\\s]+['\"](.+?)['\"]/i) ||\n                                            text.match(/description[:\\s]+([^,'\\\"\\n]+)/i);\n                            if (descMatch && descMatch[1]) {\n                                description = descMatch[1].trim();\n                                extractionSource = 'message.content.text desc match';\n                                elizaLogger.info(`Extracted description from message text, length: ${description.length}`);\n                            }\n                        }\n                    }\n                }\n                \n                // Clean up extracted content\n                if (title) {\n                    // Remove any quotes around the title\n                    title = title.replace(/^['\"](.+)['\"]$/, '$1').replace(/[,.;:'\"!?]$/, '').trim();\n                }\n                \n                if (description) {\n                    // Remove any quotes around the description\n                    description = description.replace(/^['\"](.+)['\"]$/, '$1').replace(/[,.;:'\"!?]$/, '').trim();\n                }\n            }\n            \n            // Only auto-generate as a last resort if we couldn't extract from the agent's message\n            if ((!title || !description) && (!extractionSource || extractionSource !== 'message.content.text')) {\n                elizaLogger.info(\"Title or description missing. Will auto-generate content only as last resort.\");\n                \n                try {\n                    // Build context for text generation\n                    const context = composeContext({\n                        state: { \n                            messageText: message?.content?.text || \"Create a forum post\",\n                            userRequest: message?.content?.text || \"Create a forum post\",\n                            missingTitle: !title,\n                            missingDescription: !description,\n                            existingTitle: title,\n                            existingDescription: description\n                        },\n                        template: `\n# INSTRUCTIONS\nYou're helping to create a forum post based on a user request: \"{{userRequest}}\"\n${!title ? 'Create a brief, engaging title for this forum post.' : 'Use the existing title: \"{{existingTitle}}\"'}\n${!description ? 'Create a thoughtful, informative forum post description (2-3 paragraphs).' : 'Use the existing description.'}\n\n# OUTPUT FORMAT\nRespond with JSON in this format:\n{\n  \"title\": \"The generated forum post title\",\n  \"description\": \"The generated forum post description\"\n}\n\n# CONSTRAINTS\n- Keep titles concise (under 100 characters)\n- Make descriptions thoughtful but concise\n- Stay on topic related to the user request\n- Never include quotation marks around the entire response\n- Never include markdown formatting\n`\n                    });\n\n                    // Generate the content using the correct function\n                    const generatedContent = await generateText({\n                        runtime: runtime,\n                        context: context,\n                        modelClass: ModelClass.SMALL\n                    });\n                    \n                    elizaLogger.info(`Generated content: ${generatedContent.substring(0, 100)}...`);\n                    \n                    // Try to parse the generated content as JSON\n                    try {\n                        const parsedContent = JSON.parse(generatedContent.trim());\n                        if (!title && parsedContent.title) {\n                            title = parsedContent.title.trim();\n                            elizaLogger.info(`Using generated title: \"${title}\"`);\n                        }\n                        if (!description && parsedContent.description) {\n                            description = parsedContent.description.trim();\n                            elizaLogger.info(`Using generated description: \"${description.substring(0, 50)}...\"`);\n                        }\n                    } catch (parseError) {\n                        elizaLogger.error(`Could not parse generated content as JSON: ${parseError.message}`);\n                        // Try to extract title and description using regex as fallback\n                        const titleMatch = generatedContent.match(/title[\":]*\\s*[\"']?([^\"'\\n]+)[\"']?/i);\n                        const descMatch = generatedContent.match(/description[\":]*\\s*[\"']?([^\"'\\n]{20,})[\"']?/i);\n                        \n                        if (!title && titleMatch && titleMatch[1]) {\n                            title = titleMatch[1].trim();\n                            elizaLogger.info(`Extracted title from generated content: \"${title}\"`);\n                        }\n                        if (!description && descMatch && descMatch[1]) {\n                            description = descMatch[1].trim();\n                            elizaLogger.info(`Extracted description from generated content`);\n                        }\n                    }\n                } catch (genError) {\n                    elizaLogger.error(`Error generating forum content: ${genError.message}`);\n                }\n                \n                // Final fallback values if generation failed\n                if (!title) {\n                    title = \"Forum Post\";\n                    elizaLogger.info(`Using fallback title: \"${title}\"`);\n                }\n                \n                if (!description) {\n                    description = \"This is a forum post.\";\n                    elizaLogger.info(`Using fallback description: \"${description}\"`);\n                }\n            }\n            \n            // Debug log finalized data\n            elizaLogger.info(`FINAL VALUES BEING POSTED TO FORUM (source: ${extractionSource}):`);\n            elizaLogger.info(`- Title: \"${title}\"`);\n            elizaLogger.info(`- Description excerpt: \"${description.substring(0, 30)}...\"`);\n            \n            // Validate the title and description more thoroughly\n            if (!title || typeof title !== 'string' || !title.trim()) {\n                elizaLogger.error(\"Forum post title is invalid or empty\");\n                callback({\n                    text: \"Error creating forum post: Valid title is required. Please specify a title for your forum post.\",\n                });\n                return false;\n            }\n            \n            if (!description || typeof description !== 'string' || !description.trim()) {\n                elizaLogger.error(\"Forum post description is invalid or empty\");\n                callback({\n                    text: \"Error creating forum post: Valid description is required. Please provide content for your forum post.\",\n                });\n                return false;\n            }\n            \n            // Get the forum config\n            const config = await validateForumConfig(runtime);\n            \n            // Create the forum service\n            const forumService = createForumService(\n                config.FORUM_API_BASE_URL,\n                config.FORUM_ACCESS_TOKEN,\n                config.FORUM_REFRESH_TOKEN\n            );\n            \n            // Try to refresh tokens, but handle the case if method doesn't exist\n            try {\n                elizaLogger.info(\"Checking forum access token...\");\n                if (typeof forumService.refreshTokenIfNeeded === 'function') {\n                    await forumService.refreshTokenIfNeeded();\n                    elizaLogger.info(\"Forum tokens refreshed successfully\");\n                } else {\n                    elizaLogger.info(\"Token refresh method not available, continuing with current token\");\n                }\n            } catch (tokenError) {\n                elizaLogger.warn(\"Token refresh check failed, continuing with current token:\", tokenError);\n                // Continue with current token\n            }\n            \n            // Create the post with sanitized inputs\n            const response = await forumService.createPost(title.trim(), description.trim());\n            \n            elizaLogger.success(`Successfully created forum post: ${response.data._id}`);\n            \n            // Update tokens in environment if they were refreshed\n            const updatedTokens = forumService.getTokens();\n            if (updatedTokens.accessToken !== config.FORUM_ACCESS_TOKEN) {\n                // Tokens were refreshed, update the env variables\n                process.env.FORUM_ACCESS_TOKEN = updatedTokens.accessToken;\n                process.env.FORUM_REFRESH_TOKEN = updatedTokens.refreshToken;\n                \n                // Save updated tokens to file\n                saveTokensToFile(updatedTokens);\n            }\n            \n            // Return success via callback - IMPORTANT: Use the exact title and description that was posted\n            callback({\n                text: `Forum post created successfully! Title: \"${title}\". You can view it on the forum.`,\n                content: { \n                    postId: response.data._id,\n                    title: response.data.title,\n                    description: response.data.description,\n                    userName: response.data.userName,\n                    createdAt: response.data.createdAt\n                }\n            });\n            \n            return true;\n        } catch (error: any) {\n            elizaLogger.error(\"Error in Forum plugin handler:\", error);\n            callback({\n                text: `Error creating forum post: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    examples: createForumPostExamples as ActionExample[][],\n} as Action;\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const forumEnvSchema = z.object({\n    FORUM_API_BASE_URL: z.string().min(1, \"Forum API base URL is required\"),\n    FORUM_ACCESS_TOKEN: z.string().min(1, \"Forum access token is required\"),\n    FORUM_REFRESH_TOKEN: z.string().min(1, \"Forum refresh token is required\"),\n    ENABLE_FORUM_POST_GENERATION: z.string().optional().transform(val => val === \"true\"),\n    FORUM_POST_INTERVAL_MIN: z.string().optional().transform(val => parseInt(val || \"90\", 10)),\n    FORUM_POST_INTERVAL_MAX: z.string().optional().transform(val => parseInt(val || \"180\", 10)),\n});\n\nexport type ForumConfig = z.infer<typeof forumEnvSchema>;\n\nexport async function validateForumConfig(\n    runtime: IAgentRuntime\n): Promise<ForumConfig> {\n    try {\n        const config = {\n            FORUM_API_BASE_URL: process.env.FORUM_API_BASE_URL || runtime.getSetting(\"FORUM_API_BASE_URL\"),\n            FORUM_ACCESS_TOKEN: process.env.FORUM_ACCESS_TOKEN || runtime.getSetting(\"FORUM_ACCESS_TOKEN\"),\n            FORUM_REFRESH_TOKEN: process.env.FORUM_REFRESH_TOKEN || runtime.getSetting(\"FORUM_REFRESH_TOKEN\"),\n            ENABLE_FORUM_POST_GENERATION: process.env.ENABLE_FORUM_POST_GENERATION || runtime.getSetting(\"ENABLE_FORUM_POST_GENERATION\") || \"false\",\n            FORUM_POST_INTERVAL_MIN: process.env.FORUM_POST_INTERVAL_MIN || runtime.getSetting(\"FORUM_POST_INTERVAL_MIN\") || \"90\",\n            FORUM_POST_INTERVAL_MAX: process.env.FORUM_POST_INTERVAL_MAX || runtime.getSetting(\"FORUM_POST_INTERVAL_MAX\") || \"180\",\n        };\n        \n        return forumEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Forum API configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","import { ActionExample } from \"@elizaos/core\";\n\nexport const createForumPostExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can you create a forum post about AI advancements with title 'Future of AI' and description explaining recent breakthroughs?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll create a forum post about AI advancements for you.\",\n                action: \"FORUM_CREATE_POST\",\n                options: {\n                    title: \"Future of AI\",\n                    description: \"Recent AI breakthroughs include multimodal models like GPT-4V, advances in reasoning capabilities, and more efficient training methods.\"\n                }\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Make a forum post with title 'Interesting Tech News' and description about the latest tech developments\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll create that forum post for you right now.\",\n                action: \"FORUM_CREATE_POST\",\n                options: {\n                    title: \"Interesting Tech News\",\n                    description: \"The latest tech developments include advancements in quantum computing, new augmented reality devices, and breakthroughs in renewable energy storage.\"\n                }\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Share your thoughts on future technology on the forum\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll share my thoughts on future technology in a forum post.\",\n                action: \"FORUM_CREATE_POST\",\n                options: {\n                    title: \"Perspectives on Future Technology\",\n                    description: \"I believe future technology will increasingly blur the lines between digital and physical realities, with AI integration becoming seamless in our daily lives.\"\n                }\n            },\n        }\n    ]\n];\n","import axios, { AxiosInstance } from 'axios';\nimport { elizaLogger } from \"@elizaos/core\";\nimport { saveTokensToFile } from './setupEnvironment';\n\ninterface TokenData {\n    accessToken: string;\n    refreshToken: string;\n}\n\ninterface ForumServiceResponse {\n    data: {\n        _id: string;\n        title: string;\n        description: string;\n        userName: string;\n        createdAt: string;\n    };\n}\n\nexport class ForumService {\n    private api: AxiosInstance;\n    private baseURL: string;\n    private accessToken: string;\n    private refreshToken: string;\n\n    constructor(baseURL: string, accessToken: string, refreshToken: string) {\n        this.baseURL = baseURL;\n        this.accessToken = accessToken;\n        this.refreshToken = refreshToken;\n\n        this.api = axios.create({\n            baseURL,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        // Add interceptor to handle token refresh\n        this.api.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                if (error.response?.status === 401 && error.config && !error.config.__isRetry) {\n                    try {\n                        const refreshed = await this.refreshTokens();\n                        if (refreshed) {\n                            error.config.__isRetry = true;\n                            error.config.headers.Authorization = `Bearer ${this.accessToken}`;\n                            return this.api(error.config);\n                        }\n                    } catch (refreshError) {\n                        elizaLogger.error('Error refreshing tokens:', refreshError);\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n    }\n\n    private async refreshTokens(): Promise<boolean> {\n        try {\n            elizaLogger.info('Refreshing forum access token...');\n            const response = await axios.post(`${this.baseURL}/auth/refresh-token`, {\n                refreshToken: this.refreshToken\n            });\n            \n            if (response.data && response.data.success) {\n                const { accessToken, refreshToken } = response.data.data;\n                this.accessToken = accessToken;\n                this.refreshToken = refreshToken;\n                \n                // Save the updated tokens to file\n                saveTokensToFile({\n                    accessToken: this.accessToken,\n                    refreshToken: this.refreshToken\n                });\n                \n                elizaLogger.info('Forum tokens refreshed successfully');\n                return true;\n            }\n            return false;\n        } catch (error) {\n            elizaLogger.error('Error refreshing forum tokens:', error);\n            return false;\n        }\n    }\n\n    public getTokens(): TokenData {\n        return {\n            accessToken: this.accessToken,\n            refreshToken: this.refreshToken\n        };\n    }\n    \n    public async refreshTokenIfNeeded(): Promise<boolean> {\n        try {\n            elizaLogger.info('Checking if token refresh is needed...');\n            // Try a lightweight request to check token validity\n            \n            // Fix the API path issue - use v1/auth/verify-token instead of auth/verify-token\n            const path = this.baseURL.includes('/v1') ? '/v1/auth/verify-token' : '/auth/verify-token';\n            \n            try {\n                const response = await this.api.get(path, {\n                    headers: { Authorization: `Bearer ${this.accessToken}` }\n                });\n                \n                // If we reach here, token is valid\n                elizaLogger.debug('Token is valid');\n                return true;\n                \n            } catch (error) {\n                if (error.response?.status === 401) {\n                    // Token is invalid, refresh it\n                    elizaLogger.info('Token appears to be invalid, refreshing...');\n                    return await this.refreshTokens();\n                }\n                \n                // For other status codes like 404, we still attempt to refresh the token\n                if (error.response?.status === 404) {\n                    elizaLogger.warn('Verify token endpoint not found, attempting to refresh token directly');\n                    return await this.refreshTokens();\n                }\n                \n                throw error;\n            }\n            \n        } catch (error) {\n            elizaLogger.warn('Could not verify/refresh token:', error);\n            // Try direct refresh as fallback\n            return await this.refreshTokens();\n        }\n    }\n\n    public async createPost(title: string, description: string): Promise<ForumServiceResponse> {\n        try {\n            // Before creating a post, ensure the token is refreshed\n            await this.refreshTokens();\n            \n            const endpoint = this.baseURL.includes('/v1') ? \n                '/v1/community/create-post' : '/community/create-post';\n                \n            const response = await this.api.post(endpoint, \n                { title, description },\n                { headers: { Authorization: `Bearer ${this.accessToken}` } }\n            );\n            \n            elizaLogger.info('Forum post created successfully');\n            return response.data;\n        } catch (error) {\n            elizaLogger.error('Error creating forum post:', error);\n            throw error;\n        }\n    }\n}\n\nexport function createForumService(baseURL: string, accessToken: string, refreshToken: string): ForumService {\n    return new ForumService(baseURL, accessToken, refreshToken);\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { elizaLogger } from \"@elizaos/core\";\n\ninterface TokenData {\n    accessToken: string;\n    refreshToken: string;\n}\n\n// Default location for tokens file, can be overridden by environment variable\nconst DEFAULT_TOKENS_PATH = path.join(process.cwd(), 'forum-tokens.json');\nconst TOKENS_FILE_PATH = process.env.FORUM_TOKENS_FILE || DEFAULT_TOKENS_PATH;\n\n// Function to load tokens from file\nexport function loadTokensFromFile(): TokenData | null {\n    try {\n        if (fs.existsSync(TOKENS_FILE_PATH)) {\n            const tokens = JSON.parse(fs.readFileSync(TOKENS_FILE_PATH, 'utf8'));\n            \n            if (tokens.accessToken && tokens.refreshToken) {\n                elizaLogger.log('Forum tokens loaded from file');\n                return tokens as TokenData;\n            }\n        }\n        return null;\n    } catch (error) {\n        elizaLogger.error('Error loading tokens from file:', error);\n        return null;\n    }\n}\n\n// Function to save tokens to file\nexport function saveTokensToFile(tokens: TokenData): boolean {\n    try {\n        fs.writeFileSync(TOKENS_FILE_PATH, JSON.stringify(tokens, null, 2));\n        elizaLogger.log('Forum tokens saved to file');\n        return true;\n    } catch (error) {\n        elizaLogger.error('Error saving tokens to file:', error);\n        return false;\n    }\n}\n\n// Function to initialize environment with tokens\nexport function initializeForumEnvironment() {\n    // Try to load tokens from file if not already set\n    if (!process.env.FORUM_ACCESS_TOKEN || !process.env.FORUM_REFRESH_TOKEN) {\n        const tokens = loadTokensFromFile();\n        if (tokens) {\n            process.env.FORUM_ACCESS_TOKEN = tokens.accessToken;\n            process.env.FORUM_REFRESH_TOKEN = tokens.refreshToken;\n            elizaLogger.log('Forum environment initialized from file');\n        }\n    }\n    \n    // Set default API base URL if not set\n    if (!process.env.FORUM_API_BASE_URL) {\n        process.env.FORUM_API_BASE_URL = 'https://otlaw-api-gateway.dev.mwancloud.com/api';\n        elizaLogger.log('Using default Forum API base URL');\n    }\n    \n    // Create initial tokens file if it doesn't exist and we have tokens in environment variables\n    if (!fs.existsSync(TOKENS_FILE_PATH) && process.env.FORUM_ACCESS_TOKEN && process.env.FORUM_REFRESH_TOKEN) {\n        saveTokensToFile({\n            accessToken: process.env.FORUM_ACCESS_TOKEN,\n            refreshToken: process.env.FORUM_REFRESH_TOKEN,\n        });\n        elizaLogger.log('Initial forum tokens file created');\n    }\n    \n    // Log initialization status\n    if (process.env.FORUM_ACCESS_TOKEN && process.env.FORUM_REFRESH_TOKEN) {\n        elizaLogger.log('Forum environment is initialized');\n    } else {\n        elizaLogger.warn('Forum environment is not fully initialized. Tokens are missing.');\n    }\n}\n","import { elizaLogger, type Client, type IAgentRuntime } from \"@elizaos/core\";\nimport { ForumPostClient } from \"./post\";\nimport { validateForumConfig } from \"./environment\";\n\nexport class ForumClient implements Client {\n  name = \"forum\";\n  private runtime: IAgentRuntime;\n  private postClient: ForumPostClient | null = null;\n\n  async start(runtime: IAgentRuntime) {\n    elizaLogger.info(\"Starting forum client\");\n    this.runtime = runtime;\n\n    try {\n      // Validate config first\n      await validateForumConfig(runtime);\n\n      // Initialize post client\n      this.postClient = new ForumPostClient(runtime);\n      await this.postClient.init();\n\n      elizaLogger.success(\"Forum client started successfully\");\n      return this;\n    } catch (error) {\n      elizaLogger.error(\"Error starting forum client:\", error);\n      // Return a partially initialized client that will still work for manual posts\n      return this;\n    }\n  }\n\n  async stop() {\n    elizaLogger.info(\"Stopping forum client\");\n    if (this.postClient) {\n      this.postClient.stop();\n    }\n  }\n\n  async createPost(title?: string, description?: string): Promise<any> {\n    if (this.postClient) {\n      return this.postClient.createPost(title, description);\n    } else {\n      elizaLogger.error(\"Post client not initialized\");\n      return Promise.reject(new Error(\"Post client not initialized\"));\n    }\n  }\n}\n\n// Client interface for Eliza\nexport const ForumClientInterface: Client = {\n  name: \"forum\",\n  config: {},\n  start: async (runtime: IAgentRuntime) => {\n    const client = new ForumClient();\n    return client.start(runtime);\n  }\n};\n\nexport default ForumClientInterface;\n","import { elizaLogger, type IAgentRuntime, generateText, ModelClass, composeContext, stringToUuid } from \"@elizaos/core\";\nimport { createForumService } from \"./services\";\nimport { saveTokensToFile } from \"./setupEnvironment\";\nimport { validateForumConfig } from \"./environment\";\n\n// Post generation template - improved with stricter output formatting instructions\nconst forumPostGenerationTemplate = `\n# You are {{agentName}}\n{{bio}}\n{{style}}\n\n# Task:\nGenerate a thoughtful forum post that would be interesting to your audience.\nCreate content that matches your personality and interests.\n\n# IMPORTANT OUTPUT FORMAT:\nYou must format your response exactly as shown below with the Title and Description clearly marked:\n\nTitle: \"Your post title here\"\nDescription: \"Your detailed post content here (2-3 paragraphs)\"\n\nThe title must be between quotes and should be engaging and relevant.\nThe description must be between quotes and should be 2-3 paragraphs of thoughtful content.\nDo not include any other text, comments, or additional formatting in your response.\n`;\n\nexport class ForumPostClient {\n  private runtime: IAgentRuntime;\n  private isPosting: boolean = false;\n  private postInterval: number;\n  private postIntervalMin: number;\n  private postIntervalMax: number;\n  private enablePostGeneration: boolean;\n  private timer: NodeJS.Timeout | null = null;\n  private forumService: any;\n  private defaultRoomId: string;\n\n  constructor(runtime: IAgentRuntime) {\n    this.runtime = runtime;\n    this.postIntervalMin = parseInt(this.runtime.getSetting(\"FORUM_POST_INTERVAL_MIN\") || \"90\", 10) * 60 * 1000;\n    this.postIntervalMax = parseInt(this.runtime.getSetting(\"FORUM_POST_INTERVAL_MAX\") || \"180\", 10) * 60 * 1000;\n    this.postInterval = this.getRandomInterval();\n    this.enablePostGeneration = this.runtime.getSetting(\"ENABLE_FORUM_POST_GENERATION\") === \"true\";\n    // Create a default room ID specifically for automated posts\n    this.defaultRoomId = stringToUuid(`forum-auto-${this.runtime.agentId}`);\n\n    elizaLogger.info(`Forum post client initialized with settings:\n      - Enable post generation: ${this.enablePostGeneration}\n      - Post interval min: ${this.postIntervalMin / (60 * 1000)} minutes\n      - Post interval max: ${this.postIntervalMax / (60 * 1000)} minutes\n      - Default room ID: ${this.defaultRoomId}\n    `);\n  }\n\n  public async init(): Promise<void> {\n    try {\n      // Initialize environment and services\n      const config = await validateForumConfig(this.runtime);\n      \n      // Create forum service\n      this.forumService = createForumService(\n        config.FORUM_API_BASE_URL,\n        config.FORUM_ACCESS_TOKEN,\n        config.FORUM_REFRESH_TOKEN\n      );\n\n      // Ensure default room exists\n      await this.ensureDefaultRoom();\n\n      // Start posting scheduler if enabled\n      if (this.enablePostGeneration) {\n        elizaLogger.info(\"Automatic forum post generation is enabled\");\n        this.scheduleNextPost();\n      } else {\n        elizaLogger.info(\"Automatic forum post generation is disabled\");\n      }\n    } catch (error) {\n      elizaLogger.error(\"Failed to initialize forum post client:\", error);\n    }\n  }\n\n  private async ensureDefaultRoom(): Promise<void> {\n    try {\n      // Check if the room exists in DB\n      const roomExists = await this.runtime.databaseAdapter?.getRoom(this.defaultRoomId);\n      \n      if (!roomExists) {\n        elizaLogger.info(`Creating default forum room with ID: ${this.defaultRoomId}`);\n        await this.runtime.databaseAdapter?.createRoom(this.defaultRoomId);\n        \n        // Add the agent as a participant\n        await this.runtime.databaseAdapter?.addParticipant(\n          this.runtime.agentId,\n          this.defaultRoomId\n        );\n      } else {\n        elizaLogger.debug(`Default forum room already exists: ${this.defaultRoomId}`);\n      }\n    } catch (error) {\n      elizaLogger.error(\"Error ensuring default room exists:\", error);\n      // Create a fallback room ID if there was an error\n      this.defaultRoomId = stringToUuid(`forum-fallback-${Date.now()}`);\n      elizaLogger.info(`Created fallback room ID: ${this.defaultRoomId}`);\n    }\n  }\n\n  public stop(): void {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  }\n\n  private getRandomInterval(): number {\n    return Math.floor(Math.random() * (this.postIntervalMax - this.postIntervalMin + 1)) + this.postIntervalMin;\n  }\n\n  private scheduleNextPost(): void {\n    this.postInterval = this.getRandomInterval();\n    elizaLogger.info(`Scheduling next forum post in ${this.postInterval / (60 * 1000)} minutes`);\n    \n    this.timer = setTimeout(() => {\n      this.createPost().catch((err) => {\n        elizaLogger.error(\"Error creating forum post:\", err);\n      }).finally(() => {\n        this.scheduleNextPost();\n      });\n    }, this.postInterval);\n  }\n\n  public async createPost(title?: string, description?: string): Promise<boolean> {\n    if (this.isPosting) {\n      elizaLogger.warn(\"Already creating a forum post, skipping\");\n      return false;\n    }\n\n    this.isPosting = true;\n    try {\n      // If title and description are provided directly, use them\n      // Otherwise generate them\n      if (!title || !description) {\n        elizaLogger.info(\"Generating forum post content...\");\n\n        // Generate a topic to help guide the AI\n        const topics = this.runtime.character.topics || [\n          \"Technology\", \"Philosophy\", \"Science\", \"Art\", \"Culture\", \"Society\", \"Future\"\n        ];\n        const randomTopic = topics[Math.floor(Math.random() * topics.length)];\n\n        // Generate post content\n        const state = await this.runtime.composeState(\n          { \n            content: { \n              text: `Create a new forum post about ${randomTopic}` \n            },\n            userId: this.runtime.agentId,\n            roomId: this.defaultRoomId,\n            agentId: this.runtime.agentId\n          },\n          { agentName: this.runtime.character.name }\n        );\n\n        const context = composeContext({\n          state,\n          template: forumPostGenerationTemplate,\n        });\n\n        // Add more specific stop tokens to help formatting\n        const generatedContent = await generateText({\n          runtime: this.runtime,\n          context,\n          modelClass: ModelClass.SMALL,\n          stop: [\"</response>\", \"---\", \"###\"],\n        });\n\n        elizaLogger.debug(`Generated raw content: ${generatedContent.substring(0, 100)}...`);\n\n        // Extract title and description with improved regex - handles multiline descriptions\n        const titleMatch = generatedContent.match(/Title:\\s*[\"'](.+?)[\"']/);\n        const descriptionMatch = generatedContent.match(/Description:\\s*[\"']([\\s\\S]+?)[\"']/);\n\n        // Enhanced error handling with fallbacks\n        if (!titleMatch && !descriptionMatch) {\n          elizaLogger.error(\"Failed to extract title or description from generated content\");\n          elizaLogger.debug(\"Full generated content:\", generatedContent);\n          \n          // Fallback: Create generic title and use the generated content as description\n          title = `${this.runtime.character.name}'s Thoughts on ${randomTopic}`;\n          description = generatedContent.trim();\n          elizaLogger.info(`Using fallback title and raw content as description`);\n        } else {\n          // Extract what we can\n          if (titleMatch && titleMatch[1]) {\n            title = titleMatch[1].trim();\n          } else {\n            title = `${this.runtime.character.name}'s Thoughts on ${randomTopic}`;\n            elizaLogger.info(`Using fallback title: \"${title}\"`);\n          }\n          \n          if (descriptionMatch && descriptionMatch[1]) {\n            description = descriptionMatch[1].trim();\n          } else {\n            // If we have the title pattern but not description, use everything after the title\n            const afterTitle = generatedContent.split(/Title:\\s*[\"'](.+?)[\"']/)[2];\n            if (afterTitle) {\n              description = afterTitle.replace(/^[\\s\\n:]*Description:\\s*/i, '').trim();\n              elizaLogger.info(`Using text after title as description`);\n            } else {\n              description = `Some thoughts about ${randomTopic} from ${this.runtime.character.name}.`;\n              elizaLogger.info(`Using fallback description`);\n            }\n          }\n        }\n      }\n\n      elizaLogger.info(`Generated forum post title: \"${title}\"`);\n      elizaLogger.info(`Generated forum post description excerpt: \"${description.substring(0, 50)}...\"`);\n\n      // Ensure minimum length for both fields\n      if (title.length < 3) {\n        title = `${this.runtime.character.name}'s Post`;\n      }\n      \n      if (description.length < 10) {\n        description = `This is a post by ${this.runtime.character.name}. More content will be added soon.`;\n      }\n\n      // Create memory for the post\n      const postMemory = {\n        id: stringToUuid(`forum-post-${Date.now()}`),\n        userId: this.runtime.agentId,\n        agentId: this.runtime.agentId,\n        roomId: this.defaultRoomId,\n        content: {\n          text: `${title}\\n\\n${description}`,\n          action: \"FORUM_CREATE_POST\",\n          options: {\n            title,\n            description\n          }\n        },\n        createdAt: Date.now()\n      };\n\n      // Save the memory\n      await this.runtime.messageManager.createMemory(postMemory);\n\n      // Try to refresh tokens\n      if (typeof this.forumService.refreshTokenIfNeeded === 'function') {\n        await this.forumService.refreshTokenIfNeeded();\n      }\n\n      // Create the post\n      const response = await this.forumService.createPost(title, description);\n\n      elizaLogger.success(`Successfully created forum post: ${response.data ? response.data._id : 'ID not available'}`);\n\n      // Update tokens in environment if they were refreshed\n      const config = await validateForumConfig(this.runtime);\n      const updatedTokens = this.forumService.getTokens();\n      if (updatedTokens && updatedTokens.accessToken !== config.FORUM_ACCESS_TOKEN) {\n        // Tokens were refreshed, update the env variables and save to file\n        process.env.FORUM_ACCESS_TOKEN = updatedTokens.accessToken;\n        if (updatedTokens.refreshToken) {\n          process.env.FORUM_REFRESH_TOKEN = updatedTokens.refreshToken;\n        }\n        saveTokensToFile(updatedTokens);\n      }\n\n      return true;\n    } catch (error) {\n      elizaLogger.error(\"Error creating forum post:\", error);\n      return false;\n    } finally {\n      this.isPosting = false;\n    }\n  }\n}\n","import { Plugin } from \"@elizaos/core\";\nimport { createForumPostAction } from \"./actions/createForumPost\";\nimport { initializeForumEnvironment } from \"./setupEnvironment\";\nimport { ForumClientInterface } from \"./client\";\n\n// Initialize environment when the module loads\ninitializeForumEnvironment();\n\nexport const forumPlugin: Plugin = {\n    name: \"forum\",\n    description: \"Forum API plugin for Eliza\",\n    actions: [createForumPostAction],\n    evaluators: [],\n    providers: [],\n    clients: [ForumClientInterface],\n};\n\nexport default forumPlugin;\n"],"mappings":"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","names":["elizaLogger","elizaLogger","elizaLogger","path","elizaLogger","elizaLogger","elizaLogger","generateText","ModelClass","composeContext","elizaLogger","composeContext","generateText","ModelClass","elizaLogger"]}